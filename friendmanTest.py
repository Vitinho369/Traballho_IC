import os
import numpy as np
from scipy.stats import friedmanchisquare, wilcoxon

path_name = './friedmanTest'
os.makedirs(path_name, exist_ok=True)

def wilcoxon_test(data, col1, col2):
    try:
        stat, p_value = wilcoxon(data[col1], data[col2], zero_method='wilcox', correction=False)
        return f'{col1} & {col2} : p-valor = {p_value}\n'
    except Exception as e:
        return f'Erro ao realizar o teste de Wilcoxon entre {col1} e {col2}: {e}\n'

resultsKnnRegression = np.array([
  [0.9467741904064807, 0.9464109307593411, 0.9466233097087805, 0.9458459345559425,
   0.9462158906386312, 0.9469100833097566, 0.947128608011243, 0.9468486812516896, 
   0.9463595595288993, 0.9464822885721615], #Knn 0

   [0.9508425789102898, 0.9508463422294018, 0.9514289281393833, 0.9501818737131826,
    0.9514166010749774, 0.9508871739180498, 0.951117636008662, 0.9514406651800702, 
    0.9506357514106275, 0.951346196075405], #Knn 1

    [0.9522183790830555, 0.9505795322443185, 0.9518722555825093, 0.9513191499718021,
     0.952030725278146, 0.9519770588651207, 0.952026862243135, 0.9523527056766335,
     0.9519200573893472, 0.9519451448626709], #Knn 2

    [0.9586335117727037, 0.9580957754051607, 0.9588310673280747, 0.9580998963182648,
     0.9588003437864436, 0.958855706210165, 0.958966613883914, 0.9590713801498216, 
     0.9585476245508561, 0.9587762039745703], #Knn 3

    [0.9507065953329781, 0.9508218857607071, 0.9511966205482754, 0.9507818464890443, 
     0.9510986611410436, 0.9510269725053447, 0.9511331846319223, 0.9509166649552709,
     0.9506968567685172, 0.950814313216864] #Knn 4
])

resultsDecisionTree = np.array([
    [0.9498982694454094, 0.9144215681524688, 0.9503065367226222, 0.9520033458852609,
     0.9441411653411225, 0.894204533070139, 0.9465709243594678, 0.8535122647077366,
     0.8708522205134333, 0.9498982694454094], #DecisionTree 0

    [0.9498982694454094, 0.9144215681524688, 0.9503065367226222, 0.9520033458852609, 
     0.9441411653411225, 0.894204533070139, 0.9465709243594678, 0.8535122647077366,
     0.8708522205134333, 0.9490907475142579], #DecisionTree 1

    [0.927794476454898, 0.9229465022199064, 0.941340817515776,0.5532464121439713, 
     0.9309701092271112, 0.5382724612876769, 0.9190142367862231,
      -0.15763012642860466,  0.7376378076687894, 0.9199154553841099], #DecisionTree 2
    
    [0.9660498855851566, 0.9633452410850106, 0.9662251558456185, 0.9631056354885631,
     0.964343839573402, 0.9640786411201677, 0.9653121515475579,0.9595914867714537,
      0.9656767986321249,0.9637186855854413], #DecisionTree 3

    [0.9667904083898449, 0.9652308381079573, 0.9636959534725914, 0.9649042318680244, 
     0.9662198160801818, 0.9639018821070339, 0.9675735902304445, 0.9570126161347993, 
     0.9648376579498581, 0.9647630478281718] #DecisionTree 4
])

resultsLinearRegression = np.array([
    [0.8906360114285595, 0.8905962461496195, 0.8906943493687581, 0.890813244124437,
     0.8897047341867417, 0.8905878684313304, 0.8906616559816566,  0.8906217976258095,
     0.8906838796393162, 0.8904910432198946], #Linear 0

    [0.8906360114285594, 0.8905962461496195, 0.890694349368758, 0.8908132441244367,
    0.8897047341867413, 0.8905878684313306, 0.8906616559816565,0.8906217976258095, 0.8906838796393164,
    0.8904910432198945], #Linear 1

    [0.8906360114285595, 0.8905962461496195, 0.890694349368758, 0.890813244124437,
    0.8897047341867417, 0.8905878684313304, 0.8906616559816566, 0.8906217976258095, 0.8906838796393162,
    0.8904910432198946], #Linear 2

    [0.8906360114285594, 0.8905962461496195, 0.890694349368758, 0.8908132441244367,
    0.8897047341867413, 0.8905878684313306,  0.8906616559816565, 0.8906217976258095,
    0.8906838796393164, 0.8904910432198945], #Linear 3

    [0.8906360114285595,  0.8905962461496195,  0.8906943493687581, 0.890813244124437, 
     0.8897047341867417, 0.8905878684313304, 0.8906616559816566, 0.8906217976258095,
     0.8906838796393162, 0.8904910432198946]
])

resultsMlpRegression = np.array([
    [0.9277299574543466, 0.9285621195713711, 0.9294077443065587, 0.9303062768118341,
     0.9293394784236328, 0.9252435724978463, 0.9278079446649382, 0.9217704512901843,
     0.9295173079089094, 0.9259404071533434], #Mlp 0

    [0.9170878373253982, 0.9168973823169944, 0.9165114621772062, 0.9161528866700754, 
     0.9132210643548824, 0.9140003964536456, 0.9195462268281899, 0.9211286506738517,
     0.9171442513946481, 0.9216735688721986], #Mlp 1

    [0.8152875919545768, 0.8009016024575416, 0.4405387795164531, 0.4346113924564766,
     0.08863009919941492, 0.17314390064655688, 0.8979245502143789, 0.5229374741396662,
     -0.000149544077530539, -0.0004744755667161371], #Mlp 2

    [0.821240433203372, 0.07143861889630007, -0.0001419789407541172,-0.0002824787907971693,
      0.611210183484629,-0.0004566896892114869,-0.0002585650313833954,-0.00031479154677112043,
      -0.00012013439402396298,-0.0005293985813020318], #Mlp 3

    [0.9114504988009713, 0.9121933010107377, 0.9191551403909788, 0.9179610129841581,
      0.9115496212834362, 0.9160026452961347, 0.9209028132312728, 0.9119713454292888,
      0.9122218123742167, 0.8954026497910768] #Mlp 4
])
results = [resultsKnnRegression, resultsDecisionTree, resultsLinearRegression, resultsMlpRegression]
nameFile = ["KnnRegressorTest", "DecisionTreeRegressorTest", "LinearRegressionTest", "MlpRegressorTest"]

for modelIndex in range(len(results)):
    statistic, p_value = friedmanchisquare(*results[modelIndex])

    output_text = ""
    output_text = f"Estat√≠stica de Friedman: {statistic}\nValor-p: {p_value}\n"

    with open(f"./friedmanTest/{nameFile[modelIndex]}.txt", "w") as file:
        file.write(output_text)

    print(f"Resultados salvos em './friedmanTest/{nameFile[modelIndex]}txt'")

    if p_value < 0.05:
        path_name = './friedmanTest/wilcoxonTest'
        os.makedirs(path_name, exist_ok=True)
    
        output_text = ""
        # Gerar os pares de colunas (modelos) para comparar
        for i in range(len(results[modelIndex])):
            for j in range(i + 1, len(results[modelIndex])):
                output_text += wilcoxon_test(results[modelIndex], i, j)

        # Salvar os resultados em um arquivo de texto
        with open(f"./friedmanTest/wilcoxonTest/{nameFile[modelIndex]}.txt", "w") as file:
            file.write(output_text)

        print(f"Resultados salvos em ./friedmanTest/wilcoxonTest/{nameFile[modelIndex]}.txt")
